# -*- coding: utf-8 -*-
"""Test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sEf57wwmwNPHb0JLFtzRmHlhXFnd64q-

#1. Patient / Doctor

Create a patient class and a doctor class. Have a doctor that can handle multiple patients and setup a scheduling program where a doctor can only handle 16 patients during an 8hr work day.
"""

from datetime import datetime, timedelta

class InvalidAge(Exception): pass
class InvalidGender(Exception): pass

class Person:

  def __init__(self,name,surname,age,gender):
    
    self.name = name
    self.surname = surname
    
    if age >= 18 and age <= 100: 
      self.age = age
    else:
      raise InvalidAge

    if gender == 'M' or gender == 'F':
      self.gender = gender
    else:
      raise InvalidGender

  def __repr__(self):
    return f'{self.name} {self.surname}-{self.gender}, {self.age} years old'


  def fullname(self):
    return f'{self.name} {self.surname}'

class Patient(Person):
  def __init__(self, name, surname, age, gender):
    super().__init__(name,surname,age,gender)

  
  def __repr__(self):
    return f'{self.name} {self.surname}- {self.gender},{self.age}years old'
  

  def __ne__(self,other):
    if  (self.name == other.name) and (self.surname == other.surname) and  (self.age == other.age) and (self.gender == other.gender):
        return False

    return True

class Doctor(Person):
  def __init__(self, name, surname, age, gender):
    super().__init__(name,surname,age,gender)

    self.schedule = {}
    self.free_from = datetime.fromisoformat("2023-02-05T09:00:00")


  def __repr__(self):
    ret = ""
    for i in range(len(self.schedule)):
      ret += f'{list(self.schedule.values())[i].name} {list(self.schedule.values())[i].surname} at {list(self.schedule.keys())[i].strftime("%H:%M:%S")}, '

    return f'''Doctor {self.name} {self.surname} schedule: {ret}'''


  def register_patient(self, patient: Patient, datetime: datetime):
    
    if self.is_free(datetime):

      if not self.is_registered(patient):

        self.schedule[datetime] = patient 
        print(f'Patient {patient.name} {patient.surname} successfully registered at {datetime.strftime("%H:%M:%S")}')
        self.free_from = datetime
        self.free_from += timedelta(minutes=30)

      else:
        print(f'Patient {patient.name} {patient.surname} already registered at {datetime.strftime("%H:%M:%S")}')

    else:
      print(f'Datetime {datetime.strftime("%H:%M:%S")} already taken')



  def is_free(self, datetime: datetime):
    if datetime > self.free_from:
      return True
    else:
      return False


  def is_registered(self, patient: Patient):
    return True if patient in list(self.schedule.values()) else False

p1 = Patient("Name1","Sur1",20,"M")
p2 = Patient("Name2","Sur2",25,"M")
p3 = Patient("Name3","Sur3",26,"F")
p4 = Patient("Name4","Sur4",29,"M")

d1 = Doctor("Doc","Mr",35,"M")

d1.register_patient(p1,datetime.fromisoformat("2023-02-05T09:10:00"))
d1.register_patient(p2,datetime.fromisoformat("2023-02-05T12:12:00"))
d1.register_patient(p3,datetime.fromisoformat("2023-02-05T12:15:20"))
d1.register_patient(p2,datetime.fromisoformat("2023-02-05T18:15:20"))

print(d1)

"""#Product Inventory Project"""

class InvalidQuantity(Exception): ...
class NotInInventory(Exception): ...

class Product:
  def __init__(self,id, price, quantity):
    self.id = id
    self.price = price
    self.quantity = quantity

  def __repr__(self):
    return f'id:{self.id}-{self.price}$-{self.quantity}pcs'


  def buy(self, quantity):
    if self.quantity > quantity:
      raise InvalidQuantity
    

class Inventory:
  def __init__(self):
    self.items = []

  
  def __repr__(self):
    if self.items == []: return "No items"
    ret = ''
    for item in self.items:
      ret += f'{item.id}: {item.quantity} \n'

    return ret


  def add_item(self, product: Product):
    if product in self.items: 
      # if item is in inventory add to its quantity
      a = self.get_by_id(product.id)
      a.quantity += product.quantity
    else:
      # if it is not just add it
      self.items.append(product)


  def get_by_id(self,id):
    for item in self.items:
      if item.id == id:
        return item

    return NotInInventory


  def sum_of_products(self):
    return len(self.products)

a = Product(51,100,40)
b = Product(2,120,10)
c = Product(3,10,400)

inv = Inventory()

inv.add_item(a)
inv.add_item(b)
inv.add_item(c)

print(inv)

"""# Passenger / Hotel Reservation System"""

class Passenger:
  def __init__(self, name, city):
    self.__name = name
    self.__city = city
    self.__rooms = {}

  
  def __repr__(self):
    return f'{self.__name} To:{self.__city} Rooms:{self.__rooms}'


  def book(self, hotel, room_type, count):
    hotel.reserve_rooms(room_type,count)
    self.__rooms[room_type] = count

  @property
  def name(self):
    return self.__name

  @property
  def city(self):
    return self.__city

  @property
  def rooms(self):
    return self.__rooms

  @rooms.setter
  def rooms(self,val):
    self.__rooms = val

class NoSuchRoom(Exception): ...

class Hotel:
  def __init__(self,city,rooms):
    self.__city = city
    self.__rooms = rooms


  def __repr__(self):
    return f'{self.__city},{self.__rooms}'


  def get_city(self):
    return self.__city


  def free_rooms_list(self, room_type):
    if room_type in self.__rooms.keys():
      return self.__rooms[room_type]
    else:
      raise NoSuchRoom


  def reserve_rooms(self, room_type, count):
    if (room_type in self.__rooms.keys()) and self.__rooms[room_type] > count:
      self.__rooms[room_type] -= count
    else:
      print("Not enough free rooms")

p1 = Passenger("Sam1","Yerevan")
p2 = Passenger("Sam2","Yerevan")
p3 = Passenger("Sam3","Yerevan")

h1 = Hotel("Yerevan",{"type1":100,"type2":50,"type3":10})

p1.book(h1,'type1',20)

print(h1)
print(p1)